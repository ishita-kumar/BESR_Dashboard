{"ast":null,"code":"var _jsxFileName = \"/home/ishita/Desktop/part-time/BESR_DASHBOARD/Dashboard_CTIL/tester/src/Components/UsaMap.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport { scaleLinear } from \"d3-scale\";\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\nconst data = [{\n  id: \"HUN\",\n  name: \"Hungary\",\n  val: 10\n}, {\n  id: \"ISL\",\n  name: \"Iceland\",\n  val: 16\n}, {\n  id: \"ISR\",\n  name: \"Israel\",\n  val: 5\n}];\nconst minValue = 5; // based on the data array above\n\nconst maxValue = 16; // based on the data array above\n\nconst minColor = \"#CFD8DC\";\nconst maxColor = \"#37474F\";\nconst customScale = scaleLinear().domain([minValue, maxValue]).range([minColor, maxColor]);\n\nclass ChoroplethMap extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: wrapperStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ComposableMap, {\n      width: 980,\n      height: 551,\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Geographies, {\n      geography: \"/static/world-50m-simplified.json\",\n      disableOptimization: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, (geos, proj) => geos.map((geo, i) => {\n      const country = data.find(d => d.id === geo.properties.ISO_A3);\n      return /*#__PURE__*/React.createElement(Geography, {\n        key: geo.properties.ISO_A3 + i,\n        cacheId: geo.properties.ISO_A3 + i,\n        geography: geo,\n        projection: proj,\n        style: {\n          default: {\n            fill: country ? customScale(country.val) : \"#ECEFF1\",\n            stroke: \"#FFF\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          },\n          hover: {\n            fill: \"#263238\",\n            stroke: \"#FFF\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          },\n          pressed: {\n            fill: \"#263238\",\n            stroke: \"#FFF\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      });\n    })))));\n  }\n\n}\n\nexport default ChoroplethMap;","map":{"version":3,"sources":["/home/ishita/Desktop/part-time/BESR_DASHBOARD/Dashboard_CTIL/tester/src/Components/UsaMap.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","scaleLinear","wrapperStyles","width","maxWidth","margin","data","id","name","val","minValue","maxValue","minColor","maxColor","customScale","domain","range","ChoroplethMap","render","height","geos","proj","map","geo","i","country","find","d","properties","ISO_A3","default","fill","stroke","strokeWidth","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\nimport { scaleLinear } from \"d3-scale\"\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n}\n\nconst data = [\n  { id: \"HUN\", name: \"Hungary\", val: 10 },\n  { id: \"ISL\", name: \"Iceland\", val: 16 },\n  { id: \"ISR\", name: \"Israel\", val: 5 },\n]\n\nconst minValue = 5 // based on the data array above\nconst maxValue = 16 // based on the data array above\n\nconst minColor = \"#CFD8DC\"\nconst maxColor = \"#37474F\"\n\nconst customScale = scaleLinear()\n  .domain([minValue,maxValue])\n  .range([minColor,maxColor])\n\nclass ChoroplethMap extends Component {\n  render() {\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          width={980}\n          height={551}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          >\n          <ZoomableGroup>\n            <Geographies geography=\"/static/world-50m-simplified.json\" disableOptimization>\n              {(geos, proj) => geos.map((geo, i) => {\n\n                const country = data.find(d => d.id === geo.properties.ISO_A3)\n                \n                return (\n                  <Geography\n                    key={geo.properties.ISO_A3 + i}\n                    cacheId={geo.properties.ISO_A3 + i}\n                    geography={ geo }\n                    projection={ proj }\n                    style={{\n                      default: {\n                        fill: country ? customScale(country.val) : \"#ECEFF1\",\n                        stroke: \"#FFF\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#263238\",\n                        stroke: \"#FFF\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#263238\",\n                        stroke: \"#FFF\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      }\n                    }}\n                  />\n                )\n              })}\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default ChoroplethMap"]},"metadata":{},"sourceType":"module"}